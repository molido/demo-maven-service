#!groovy
@Library('devops@main') _

//func from shareLibrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()

def nexus = new org.devops.nexus()


//env
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"
String branchName = "${env.branchName}"
String artifactUrl = "${env.artifactUrl}"

def result = ""
def runOpts = env.runOpts

def userEmail = "1092337618@qq.com"

println("${runOpts}")



if ("${runOpts}" == "GitlabPush"){
    println("当前是GitlabPush触发")
    branchName = branch - "refs/heads/"
    println("${branchName}")
    currentBuild.description = "Trigger by ${userName} ${branch}"
    println("${projectId}"+"${commitSha}")
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")
    env.runOpts = "GitlabPush"
}else if ("${runOpts}" == "GerritTrigger") {
     // Gerrit触发时赋值srcUrl和branchName
     currentBuild.description = "Triggered by Gerrit on branch ${branchName}"
 }  else {
   userEmail = "1092337618@qq.com"
}


pipeline{
    agent any
    stages{
        stage("CheckOut"){
            steps{
                script{
                     if (env.GERRIT_REFSPEC && env.GERRIT_PATCHSET_REVISION) {
                         def gerritSshUrl = "${env.GERRIT_SCHEME}://jenkins@${env.GERRIT_HOST}:${env.GERRIT_PORT}/${env.GERRIT_PROJECT}"
                         def refspec = env.GERRIT_REFSPEC
                         def revision = env.GERRIT_PATCHSET_REVISION
                         tools.printMess("Gerrit Patch Checkout: ${refspec}, ${gerritSshUrl}", "green")

                         checkout([
                             $class: 'GitSCM',
                             branches: [[name: "${revision}"]],
                             userRemoteConfigs: [[
                                 url: gerritSshUrl,
                                 refspec: "${refspec}",
                                 credentialsId: 'rootnew95'
                             ]]
                         ])

                         tools.printMess("Gerrit Patch 代码下载完成", "green")
                         tools.printMess("Gerrit Patch 代码下载完成", "green")
                         tools.printMess("Gerrit Patch 代码下载完成", "green")
                     }
                }
            }
        }
        stage("Build"){
            steps{
                    script{
                            tools.printMess("执行打包","green")
                            build.Build(buildType,buildShell)
                            //artifactory.main(buildType,buildShell)
                            //artifactory.PushArtifact()
                            
                            //上传制品
                            nexus.main("nexus")
                            
                            //发布制品
                            //sh " wget ${artifactUrl} && ls "

                            //deploy.SaltDeploy("${deployHosts}","test.ping")
                            //deploy.ansibleDeply("${deployHosts}","-m ping ")
                    }
            }
        }
        stage("QA"){
            steps {
                script{
                    tools.printMess("搜索项目","green")
                    result = sonarapi.SerarchProject("${JOB_NAME}")
                    println(result)
                    
                    if (result == "false"){
                        println("${JOB_NAME}---项目不存在,准备创建项目---> ${JOB_NAME}！")
                        sonarapi.CreateProject("${JOB_NAME}")
                    } else {
                        println("${JOB_NAME}---项目已存在！")
                    }
                    
                    tools.printMess("配置项目质量规则","green")
                    def qpName="Sonar%20way"   //Sonar%20way   "${JOB_NAME}".split("-")[0]
                    sonarapi.ConfigQualityProfiles("${JOB_NAME}","java",qpName)
                
                    tools.printMess("配置质量阈","green")
                    sonarapi.ConfigQualityGates("${JOB_NAME}",qpName)
                
                    tools.printMess("代码扫描","green")
                    sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src", "master")
                    

                    sleep 3
                    tools.printMess("获取扫描结果","green")
                    result = sonarapi.GetProjectStatus("${JOB_NAME}")
                    
                    
                    println(result)
                    if (result.toString() == "ERROR"){
                        //toemail.Email("代码质量阈错误！请及时修复！",userEmail)
                        error " 代码质量阈错误！请及时修复！"
                        
                        
                    } else {
                        println(result)
                    }

                }
           }
       }
    
    }

    post {
        always{
            script{
                println("always")
            }
        }
        
        success{
            script{
                println("success")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                }
                //toemail.Email("流水线成功",userEmail)
            
            }
        
        }
        failure{
            script{
                println("failure")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                }
                //toemail.Email("流水线失败了！",userEmail)
            }
        }
        
        aborted{
            script{
                println("aborted")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                }
               //toemail.Email("流水线被取消了！",userEmail)
            }
        
        }
    
    }

}